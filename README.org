
#+TITLE: What every computer science major should know

#+CATEGORY: LEARNING FUNNEL

* An engineering core
  Computer scientists and traditional engineers need to speak the same
  language--a language rooted in real analysis, linear algebra,
  probability and physics.

  Computer scientists ought to take physics through
  electromagnetism. But, to do that, they'll need take up through
  multivariate calculus, (and differential equations for good
  measure).

  In constructing sound simulations, a command of probability and
  (often times) linear algebra is invaluable. In interpreting results,
  there is no substitute for a solid understanding of statistics.


** TODO Recommended reading www.3blue1brown.com
   - [ ] Essence of linear algebra 100 points
   - [ ] Differential equations 100 points
   - [ ] Essence of calculus    100 points
   - [ ] Fourier series 20 points


* The Unix philosophy
   The Unix philosophy (as opposed to Unix itself) is one that
   emphasizes linguistic abstraction and composition in order to
   effect computation.

   In practice, this means becoming comfortable with the notion of
   command-line computing, text-file configuration and IDE-less
   software development.

** TODO Specific recommendations / 100 points + 100 points
   - [ ] Basic Unix, including the ability to:
     - navigate and manipulate the filesystem;
     - compose processes with pipes;
     - comfortably edit a file with emacs and vim;
     - create, modify and execute a Makefile for a software project;
     - write simple shell scripts.

   - [ ] Students will reject the Unix philosophy unless they understand its power.
	 - Find the five folders in a given directory consuming the most space.
     - Report duplicate MP3s (by file contents, not file name) on a computer.
     - Take a list of names whose first and last names have been lower-cased, and properly recapitalize them.
     - Find all words in English that have x as their second letter, and n as their second-to-last.
     - Directly route your microphone input over the network to another computer's speaker.
     - Replace all spaces in a filename with underscore for a given directory.
     - Report the last ten errant accesses to the web server coming from a specific IP address.

** TODO Recommended reading / eatch 100 points
   - [ ] Linux Tools for Developers https://www.coursera.org/learn/linux-tools-for-developers
   - [ ] Operating Systems and You: Becoming a Power User https://www.coursera.org/learn/os-power-user
   - [ ] The Bits and Bytes of Computer Networking https://www.coursera.org/learn/computer-networking
   - [ ] The Raspberry Pi Platform and Python Programming for the Raspberry Pi https://www.coursera.org/learn/raspberry-pi-platform
   - [ ] Using Git for Distributed Development https://www.coursera.org/learn/git-distributed-development

*  Programming languages

  Programming languages rise and fall with the solar cycle.

  A programmer's career should not.

  While it is important to teach languages relevant to employers, it
  is equally important that students learn how to teach themselves new
  languages.

  The best way to learn how to learn progamming languages is to learn
  multiple programming languages and programming paradigms.

  The difficulty of learning the nth language is half the difficulty
  of the (n-1)th.

** Specific languages

   The following languages provide a reasonable mixture of paradigms
   and practical applications:

   Racket;
   C;
   Pharo/SmallTalk;
   Haskell;
   Assembly.

*** Racket

	Racket, as a full-featured dialect of Lisp, has an aggressively simple syntax.

	If taught correctly, Lisp liberates.

**** TODO Recommended reading / 300 points
	 - [ ] How to Design Programs by Felleisen, Findler, Flatt and Krishnamurthi.  https://htdp.org/
	 - [ ] Sprachebenen und Material zu Schreibe Dein Programm! https://docs.racket-lang.org/deinprogramm/index.html
	 - [ ] Structure and Interpretation of Computer Programs, by Abelson, Sussman, and Sussman. https://mitpress.mit.edu/sites/default/files/sicp/index.html

*** Python

	All in all PL

**** TODO Recommended reading / 300 points
   - [ ] Design of Computer Programs (Udacity) https://www.mooc-list.com/course/design-computer-programs-udacity
   - [ ] pytudes https://github.com/norvig/pytudes

*** ANSI C

	C is a terse and unforgiving abstraction of silicon.

	C remains without rival in programming embedded systems.

**** TODO Recommended reading / 300 points
	 - [ ] ANSI C by Kernighan and Ritchie.


*** Pharo

  Pharo is a modern dialect of Smalltalk, purest of object-oriented languages.

  It imparts the essence of "object-oriented."

**** TODO Recommended reading /  300 points
     - [ ] Smalltalk, Objects, and Design Liu, Chamond


*** Haskell

	Haskell is the crown jewel of the Hindley-Milner family of languages.

	Fully exploiting laziness, Haskell comes closest to programming in
	pure mathematics of any major programming language.

**** TODO Recommended reading / 300 points
     - [ ] Learn You a Haskell by Lipovaca. http://learnyouahaskell.com/

** Assembly

   Learning compilers is the best way to learn assembly, since it
   gives the computer scientist an intuitive sense of how high-level
   code will be transformed.

**** TODO Recommended reading /  300 points
	 - [ ] From Nand to Tetris https://www.nand2tetris.org/ and https://www.coursera.org/learn/build-a-computer



* Discrete mathematics

  Computer scientists must have a solid grasp of formal logic and of
  proof. Proof by algebraic manipulation and by natural deduction
  engages the reasoning common to routine programming tasks. Proof by
  induction engages the reasoning used in the construction of
  recursive functions.

  Computer scientists must be fluent in formal mathematical notation,
  and in reasoning rigorously about the basic discrete structures:
  sets, tuples, sequences, functions and power sets.

** TODO Specific recommendations / 500 points

   For computer scientists, it's important to cover reasoning about:

    trees;
    graphs;
    formal languages; and
    automata.

	Students should learn enough number theory to study and implement
	common cryptographic protocols.

*** Recommended reading
	- [ ] Introduction to Discrete Mathematics for Computer Science Specialization https://www.coursera.org/specializations/discrete-mathematics?

* Data structures and algorithms

  Students should certainly see the common (or rare yet unreasonably
  effective) data structures and algorithms.

  But, more important than knowing a specific algorithm or data
  structure (which is usually easy enough to look up), computer
  scientists must understand how to design algorithms (e.g., greedy,
  dynamic strategies) and how to span the gap between an algorithm in
  the ideal and the nitty-gritty of its implementation.  Specific
  recommendations

** At a minimum, computer scientists seeking stable long-run employment should know all of the following:

    hash tables;
    linked lists;
    trees;
    binary search trees; and
    directed and undirected graphs.

	Computer scientists should be ready to implement or extend an
	algorithm that operates on these data structures, including the
	ability to search for an element, to add an element and to remove
	an element.

	For completeness, computer scientists should know both the imperative and functional versions of each algorithm.

*** TODO Recommended reading / 300 points
	- [ ] Pearls of Functional Algorithm Design Book by Richard S. Bird

* Artificial intelligence

  If for no other reason than its outsized impact on the early history
  of computing, computer scientists should study artificial
  intelligence.

  While the original dream of intelligent machines seems far off,
  artificial intelligence spurred a number of practical fields, such as
  machine learning, data mining and natural language processing.

** TODO Recommended reading / 300 points
   - [ ] Artificial Intelligence by Russell and Norvig.
   - [ ] Introduction to Artificial Intelligence (Udacity) https://www.mooc-list.com/course/introduction-artificial-intelligence-udacity


* Machine learning

  Aside from its outstanding technical merits, the sheer number of job
  openings for "relevance engineer," indicates that every computer
  scientist should grasp the fundamentals of machine learning.

  Machine learning doubly emphasizes the need for an understanding of
  probability and statistics.

** Specific recommendations

   At the undergraduate level, core concepts should include Bayesian
   networks, clustering and decision-tree learning.

** TODO Recommended reading / 300 points
   - [ ] Julia programming language

* TODO Non-specific reading recommendations / 100 points each
  - [ ] GÃ¶del, Escher, Bach by Hofstadter.
  - [ ] On Writing: A Memoir of the Craft by Stephen King
  - [ ] Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig


* org-config                                                        :ARCHIVE:
#+STARTUP: content hidestars
#+TAGS: DOCS(d) CODING(c) TESTING(t) PLANING(p)
#+LINK_UP: sitemap.html
#+LINK_HOME: main.html
#+COMMENT: toc:nil
#+OPTIONS: ^:nil
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+DESCRIPTION: Augment design process with system property discovering aid.
#+KEYWORDS: SmallCell,
#+LANGUAGE: en

#+STYLE: <link rel="stylesheet" type="text/css" href="org-manual.css" />
#+PROPERTY: Effort_ALL  1:00 2:00 4:00 6:00 8:00 12:00
#+COLUMNS: %38ITEM(Details) %TAGS(Context) %7TODO(To Do) %5Effort(Time){:} %6CLOCKSUM{Total}
